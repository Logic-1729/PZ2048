// Generated by Google Gemini
const API_BASE_URL = 'http://localhost:18080';
const gameBoardElement = document.getElementById('game-board');
const scoreElement = document.getElementById('score');
const stepsElement = document.getElementById('steps');
const messageElement = document.getElementById('game-message');
const BOARD_SIZE = 4;

function createBoardHTML() {
    gameBoardElement.innerHTML = '';
    for (let i = 0; i < BOARD_SIZE; i++) {
        for (let j = 0; j < BOARD_SIZE; j++) {
            const cell = document.createElement('div');
            cell.classList.add('game-cell');
            cell.id = `cell-${i}-${j}`;
            gameBoardElement.appendChild(cell);
        }
    }
}

function updateDisplayFromData(boardString, score, steps, stuck, reachedTarget = false) {
    const rows = boardString.trim().split('\n');
    for (let i = 0; i < rows.length; i++) {
        const cells = rows[i].split(' ');
        for (let j = 0; j < cells.length; j++) {
            const value = parseInt(cells[j]);
            const cellElement = document.getElementById(`cell-${i}-${j}`);
            if (cellElement) {
                cellElement.textContent = value === 0 ? '' : value;
                cellElement.className = 'game-cell';
                cellElement.classList.add(`tile-${value}`);
            }
        }
    }
    if (scoreElement) scoreElement.textContent = `Score: ${score}`;
    if (stepsElement) stepsElement.textContent = `Steps: ${steps}`;

    if (messageElement) {
        if (stuck) {
            messageElement.textContent = "Game Over! You are Stuck!";
            messageElement.style.display = 'block';
            messageElement.style.backgroundColor = 'rgba(255, 99, 71, 0.8)';
            messageElement.style.color = 'white';
        } else if (reachedTarget) {
            messageElement.textContent = "Congratulations! You Reached 2048!";
            messageElement.style.display = 'block';
            messageElement.style.backgroundColor = 'rgba(60, 179, 113, 0.8)';
            messageElement.style.color = 'white';
        } else {
            messageElement.textContent = "";
            messageElement.style.display = 'none';
            messageElement.style.backgroundColor = '';
            messageElement.style.color = '';
        }
    }
}

async function updateDisplay() {
    try {
        const response = await fetch(`${API_BASE_URL}/board`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        updateDisplayFromData(data.board, data.score, data.steps, data.stuck, data.reached_2048 || false);
    } catch (error) {
        console.error("Error fetching board state:", error);
        if (messageElement) {
            messageElement.textContent = "Error: Could not connect to game backend. Please ensure the C++ backend is running.";
            messageElement.style.display = 'block';
            messageElement.style.backgroundColor = 'rgba(255, 0, 0, 0.8)';
            messageElement.style.color = 'white';
        }
    }
}

async function sendMove(direction) {
    try {
        const response = await fetch(`${API_BASE_URL}/play`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ direction: direction })
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error || response.statusText}`);
        }
        const data = await response.json();
        if (data.status === 'success') {
            console.log("Move successful, board updated:", data.board);
            updateDisplayFromData(data.board, data.score, data.steps, data.stuck, data.reached_2048 || false);

        } else {
            console.error("Move failed:", data.error || "Unknown error");
            if (messageElement) {
                messageElement.textContent = `Move failed: ${data.error || "Unknown error"}`;
                messageElement.style.display = 'block';
                messageElement.style.backgroundColor = 'rgba(255, 165, 0, 0.8)';
                messageElement.style.color = 'white';
            }
        }
    } catch (error) {
        console.error("Error sending move:", error);
        if (messageElement) {
            messageElement.textContent = `Error during move: ${error.message}`;
            messageElement.style.display = 'block';
            messageElement.style.backgroundColor = 'rgba(255, 0, 0, 0.8)';
            messageElement.style.color = 'white';
        }
    }
}

async function sendUndo() {
    try {
        const response = await fetch(`${API_BASE_URL}/undo`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error || response.statusText}`);
        }
        const data = await response.json();
        if (data.status === 'success') {
            console.log("Undo successful, board updated:", data.board);
            updateDisplayFromData(data.board, data.score, data.steps, false, false);

        } else {
            console.warn("Undo failed:", data.message || "Unknown error");
            if (messageElement) {
                messageElement.textContent = data.message || "Undo failed.";
                messageElement.style.display = 'block';
                messageElement.style.backgroundColor = 'rgba(255, 165, 0, 0.8)';
                messageElement.style.color = 'white';
            }
        }
    } catch (error) {
        console.error("Error sending undo:", error);
        if (messageElement) {
            messageElement.textContent = `Error during undo: ${error.message}`;
            messageElement.style.display = 'block';
            messageElement.style.backgroundColor = 'rgba(255, 0, 0, 0.8)';
            messageElement.style.color = 'white';
        }
    }
}

async function initializeGame() {
    try {
        const response = await fetch(`${API_BASE_URL}/init`, { method: 'POST' });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`HTTP error! status: ${response.status}, message: ${errorData.error || response.statusText}`);
        }
        const data = await response.json();
        console.log(data.message);
        updateDisplayFromData(data.board, data.score, data.steps, false, false);
        if (messageElement) {
            messageElement.textContent = "";
            messageElement.style.display = 'none';
            messageElement.style.backgroundColor = '';
            messageElement.style.color = '';
        }

    } catch (error) {
        console.error("Error initializing game:", error);
        if (messageElement) {
            messageElement.textContent = `Error initializing game: ${error.message}. Please ensure the C++ backend is running.`;
            messageElement.style.display = 'block';
            messageElement.style.backgroundColor = 'rgba(255, 0, 0, 0.8)';
            messageElement.style.color = 'white';
        }
    }
}

createBoardHTML();
initializeGame();

// 事件监听器
document.getElementById('up').addEventListener('click', () => sendMove('w'));
document.getElementById('left').addEventListener('click', () => sendMove('a'));
document.getElementById('down').addEventListener('click', () => sendMove('s'));
document.getElementById('right').addEventListener('click', () => sendMove('d'));
document.getElementById('undo-btn').addEventListener('click', sendUndo);
document.getElementById('reset').addEventListener('click', initializeGame);

document.addEventListener('keydown', (event) => {
    let dir = '';
    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'w', 'a', 's', 'd'].includes(event.key.toLowerCase())) {
        event.preventDefault();
    }

    if (event.key === 'ArrowUp' || event.key === 'w') {
        dir = 'w';
    } else if (event.key === 'ArrowLeft' || event.key === 'a') {
        dir = 'a';
    } else if (event.key === 'ArrowDown' || event.key === 's') {
        dir = 's';
    } else if (event.key === 'ArrowRight' || event.key === 'd') {
        dir = 'd';
    }
    if (dir) {
        sendMove(dir);
    } else if (event.key === 'z' || event.key === 'Z') {
        sendUndo();
    }
});