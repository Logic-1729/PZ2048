// Generated by Google gemini
#include "../third_party/Crow/include/crow.h"
#include "include/game_logic.h"
#include <iostream>
#include <stdexcept>
#include <random>
#include <algorithm>
#include "../third_party/Crow/include/crow/middlewares/cors.h"

int main() {
    crow::App<crow::CORSHandler> app;

    auto& cors = app.get_middleware<crow::CORSHandler>();
    cors.global()
        .origin("*")
        .methods("POST"_method)
        .methods("GET"_method)
        .methods("OPTIONS"_method)
        .headers("Content-Type")
        .max_age(86400);

    app.port(18080).multithreaded();

    CROW_ROUTE(app, "/")([](){
        crow::response res("Hello from C++ 2048 Backend!");
        return res;
    });

    CROW_ROUTE(app, "/init")
    .methods("POST"_method)([&](const crow::request& req){
        std::random_device rd;
        std::mt19937 gen(rd());

        crow::json::rvalue request_body_json;
        int rows = 4;
        int cols = 4;
        try {
            request_body_json = crow::json::load(req.body);
            if (request_body_json.has("rows") && request_body_json["rows"].t() == crow::json::type::Number) {
                rows = static_cast<int>(request_body_json["rows"].d());
            }
            if (request_body_json.has("cols") && request_body_json["cols"].t() == crow::json::type::Number) {
                cols = static_cast<int>(request_body_json["cols"].d());
            }
        } catch (const std::runtime_error& e) {
        }

        rows = std::max(1, std::min(10, rows));
        cols = std::max(1, std::min(10, cols));

        PZ2048::Start(rows, cols, gen());

        crow::json::wvalue response_json;
        response_json["message"] = "Game initialized successfully!";
        response_json["board"] = PZ2048::SerializeBoard();
        response_json["score"] = PZ2048::Score();
        response_json["steps"] = PZ2048::Steps();
        response_json["rows"] = rows;
        response_json["cols"] = cols;

        crow::response res(200, response_json);
        res.set_header("Content-Type", "application/json");
        return res;
    });

    CROW_ROUTE(app, "/play")
    .methods("POST"_method)([&](const crow::request& req){
        crow::json::rvalue request_body_json;
        try {
            request_body_json = crow::json::load(req.body);
        } catch (const std::runtime_error& e) {
            crow::json::wvalue error_json;
            error_json["error"] = "Invalid JSON in request body.";
            error_json["details"] = e.what();
            crow::response res(400, error_json);
            res.set_header("Content-Type", "application/json");
            return res;
        }

        std::string direction_str;
        if (request_body_json.has("direction") &&
            request_body_json["direction"].t() == crow::json::type::String) {
            direction_str = request_body_json["direction"].s();
        } else {
            crow::json::wvalue error_json;
            error_json["error"] = "Missing or invalid 'direction' in request body.";
            crow::response res(400, error_json);
            res.set_header("Content-Type", "application/json");
            return res;
        }

        if (direction_str.empty()) {
            crow::json::wvalue error_json;
            error_json["error"] = "'direction' string cannot be empty.";
            crow::response res(400, error_json);
            res.set_header("Content-Type", "application/json");
            return res;
        }

        char dir = direction_str[0];

        bool moved = PZ2048::TryRun(dir);

        crow::json::wvalue response_json;
        response_json["status"] = "success";
        response_json["board"] = PZ2048::SerializeBoard();
        response_json["score"] = PZ2048::Score();
        response_json["steps"] = PZ2048::Steps();
        response_json["moved"] = moved;
        response_json["stuck"] = PZ2048::Stuck();
        response_json["rows"] = PZ2048::GetRows();
        response_json["cols"] = PZ2048::GetCols();
        response_json["reached_2048"] = PZ2048::HasReachedTarget();

        crow::response res(200, response_json);
        res.set_header("Content-Type", "application/json");
        return res;
    });

    CROW_ROUTE(app, "/undo")
    .methods("POST"_method)([&](){
        bool undone = PZ2048::Undo();

        crow::json::wvalue response_json;
        response_json["status"] = undone ? "success" : "failed";
        response_json["message"] = undone ? "Undo successful." : "No previous move to undo.";
        response_json["board"] = PZ2048::SerializeBoard();
        response_json["score"] = PZ2048::Score();
        response_json["steps"] = PZ2048::Steps();
        response_json["rows"] = PZ2048::GetRows();
        response_json["cols"] = PZ2048::GetCols();
        response_json["stuck"] = PZ2048::Stuck();
        response_json["reached_2048"] = PZ2048::HasReachedTarget();

        crow::response res(200, response_json);
        res.set_header("Content-Type", "application/json");
        return res;
    });

    CROW_ROUTE(app, "/board")([](){
        crow::json::wvalue response_json;
        response_json["board"] = PZ2048::SerializeBoard();
        response_json["score"] = PZ2048::Score();
        response_json["steps"] = PZ2048::Steps();
        response_json["stuck"] = PZ2048::Stuck();
        response_json["rows"] = PZ2048::GetRows();
        response_json["cols"] = PZ2048::GetCols();
        response_json["reached_2048"] = PZ2048::HasReachedTarget();

        crow::response res(200, response_json);
        res.set_header("Content-Type", "application/json");
        return res;
    });

    std::cout << "C++ 2048 Backend listening on port 18080..." << std::endl;
    app.run();
    return 0;
}